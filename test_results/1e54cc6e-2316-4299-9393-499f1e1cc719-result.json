{"name": "test_full_order", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=132.0.6834.162); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6902180D5+2992373]\n\t(No symbol) [0x00007FF68FEABFD0]\n\t(No symbol) [0x00007FF68FD4590A]\n\t(No symbol) [0x00007FF68FD4C46F]\n\t(No symbol) [0x00007FF68FD4F49F]\n\t(No symbol) [0x00007FF68FDE0840]\n\t(No symbol) [0x00007FF68FDBF36A]\n\t(No symbol) [0x00007FF68FDDF584]\n\t(No symbol) [0x00007FF68FDBF113]\n\t(No symbol) [0x00007FF68FD8A918]\n\t(No symbol) [0x00007FF68FD8BA81]\n\tGetHandleVerifier [0x00007FF690276A2D+3379789]\n\tGetHandleVerifier [0x00007FF69028C32D+3468109]\n\tGetHandleVerifier [0x00007FF690280043+3418211]\n\tGetHandleVerifier [0x00007FF69000C78B+847787]\n\t(No symbol) [0x00007FF68FEB757F]\n\t(No symbol) [0x00007FF68FEB2FC4]\n\t(No symbol) [0x00007FF68FEB315D]\n\t(No symbol) [0x00007FF68FEA2979]\n\tBaseThreadInitThunk [0x00007FF8DF07259D+29]\n\tRtlUserThreadStart [0x00007FF8E002AF38+40]", "trace": "set_up = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9c56559126a62d2c9b0c45af50bedd20\")>\n\n    @pytest.mark.smoke\n    @allure.description(\"Создание заказа с добавлением товара через избранное\")\n    def test_full_order(set_up):\n        driver = set_up\n    \n        login = LoginPage(driver)\n>       login.auth()\n\ntests\\test_create_delivery_order.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\login_module.py:66: in auth\n    self.click_enter_button()\npages\\login_module.py:42: in click_enter_button\n    self.get_enter_button().click()\npages\\login_module.py:26: in get_enter_button\n    return WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable((By.XPATH, self.enter_button)))\n.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n.venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:632: in _predicate\n    element = visibility_of(target)(driver)\n.venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\n.venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:338: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DCFBD8A490>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF68FEA2979]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8DF07259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8E002AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=132.0.6834.162); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6902180D5+2992373]\nE       \t(No symbol) [0x00007FF68FEABFD0]\nE       \t(No symbol) [0x00007FF68FD4590A]\nE       \t(No symbol) [0x00007FF68FD4C46F]\nE       \t(No symbol) [0x00007FF68FD4F49F]\nE       \t(No symbol) [0x00007FF68FDE0840]\nE       \t(No symbol) [0x00007FF68FDBF36A]\nE       \t(No symbol) [0x00007FF68FDDF584]\nE       \t(No symbol) [0x00007FF68FDBF113]\nE       \t(No symbol) [0x00007FF68FD8A918]\nE       \t(No symbol) [0x00007FF68FD8BA81]\nE       \tGetHandleVerifier [0x00007FF690276A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF69028C32D+3468109]\nE       \tGetHandleVerifier [0x00007FF690280043+3418211]\nE       \tGetHandleVerifier [0x00007FF69000C78B+847787]\nE       \t(No symbol) [0x00007FF68FEB757F]\nE       \t(No symbol) [0x00007FF68FEB2FC4]\nE       \t(No symbol) [0x00007FF68FEB315D]\nE       \t(No symbol) [0x00007FF68FEA2979]\nE       \tBaseThreadInitThunk [0x00007FF8DF07259D+29]\nE       \tRtlUserThreadStart [0x00007FF8E002AF38+40]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "description": "Создание заказа с добавлением товара через избранное", "steps": [{"name": "Авторизация пользователя", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=132.0.6834.162); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6902180D5+2992373]\n\t(No symbol) [0x00007FF68FEABFD0]\n\t(No symbol) [0x00007FF68FD4590A]\n\t(No symbol) [0x00007FF68FD4C46F]\n\t(No symbol) [0x00007FF68FD4F49F]\n\t(No symbol) [0x00007FF68FDE0840]\n\t(No symbol) [0x00007FF68FDBF36A]\n\t(No symbol) [0x00007FF68FDDF584]\n\t(No symbol) [0x00007FF68FDBF113]\n\t(No symbol) [0x00007FF68FD8A918]\n\t(No symbol) [0x00007FF68FD8BA81]\n\tGetHandleVerifier [0x00007FF690276A2D+3379789]\n\tGetHandleVerifier [0x00007FF69028C32D+3468109]\n\tGetHandleVerifier [0x00007FF690280043+3418211]\n\tGetHandleVerifier [0x00007FF69000C78B+847787]\n\t(No symbol) [0x00007FF68FEB757F]\n\t(No symbol) [0x00007FF68FEB2FC4]\n\t(No symbol) [0x00007FF68FEB315D]\n\t(No symbol) [0x00007FF68FEA2979]\n\tBaseThreadInitThunk [0x00007FF8DF07259D+29]\n\tRtlUserThreadStart [0x00007FF8E002AF38+40]\n\n", "trace": "  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\pages\\login_module.py\", line 66, in auth\n    self.click_enter_button()\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\pages\\login_module.py\", line 42, in click_enter_button\n    self.get_enter_button().click()\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\pages\\login_module.py\", line 26, in get_enter_button\n    return WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable((By.XPATH, self.enter_button)))\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 632, in _predicate\n    element = visibility_of(target)(driver)\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 260, in _predicate\n    return _element_if_visible(element)\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 280, in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 338, in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 528, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\golik\\PycharmProjects\\lentaProject\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1739998196839, "stop": 1739998233466}], "attachments": [{"name": "stdout", "source": "4c7e0d07-61ce-4e86-9e26-6d43ea35f1d5-attachment.txt", "type": "text/plain"}], "start": 1739998196839, "stop": 1739998233484, "uuid": "79adf313-d1ab-4d75-8b02-50170d2e4c9d", "historyId": "0d4aed2b781a8233f5801c9435a0dc21", "testCaseId": "0d4aed2b781a8233f5801c9435a0dc21", "fullName": "tests.test_create_delivery_order#test_full_order", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_create_delivery_order"}, {"name": "host", "value": "LAPTOP-0IQ88JU5"}, {"name": "thread", "value": "36236-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_create_delivery_order"}]}